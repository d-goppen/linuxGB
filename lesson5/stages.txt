#!/bin/bash
# 1 Написать скрипт, который удаляет из текстового файла пустые строки
#   и заменяет маленькие символы на большие (воспользуйтесь tr или sed).
#   Скрипт должен выводить информацию о том, как его использовать.

# 2 Определеить, какие ошибки записывается в /var/log/auth.log при попытке
#   неудачной аутентификации пользователя для ssh подключения, для подключения
#   через терминал - ctrl+alt+f3 и для подключения с помощью виртуального терминала
#   (gui приложения). Сделать скрипт мониторинга лога /var/log/auth.log на наличие
#   этих событий, который выводит сообщения о попытке неудачной аутентификации на экран.
#   Проверить скрипт, выполнив ошибочную регистрацию с терминала, с помощью виртуального
#   терминала и через ssh. Скрипт должен выводить информацию о том, как его использовать.

# 3 Написать скрипт, который в указанной с помощью параметра -d директории создает
#   указанные файлы. Если файлы уже существуют, то выводится предупреждения на экран.
#   Если указано несколько директорий, то выводится ошибка с соответствуюзей информацией.
#   Созданным файлам, которые имеют разрешения '.sh' нужно дать права на выполнения.
#   Скрипт должен выводить информацию о том, как его использовать и понятные сообщения
#   об ошибках. Примеры запуска:
#    ./script.sh -d /tmp/task_3
#    ./script.sh -d file1 file2 file3
#    ./script.sh -d /tmp/task_3 file1 file2.sh file3
#    ./script.sh -d /tmp/task_3 -d /tmp/task_3_2 file1 file2.sh file3

# 4*Создать файл crontab, который ежедневно регистрирует занятое каждым пользователем
#   дисковое пространство в его домашней директории.

# 5*Создать скрипт ownersort.sh, который в заданной папке копирует файлы в директории,
#   названные по имени владельца каждого файла. Учтите, что после копирования файл должен
#   принадлежать соответствующему владельцу.

# 6*Периодическая выдача на stdout сообщенияо том, сколько времени прошло после запуска
#   таймера (т.е. скрипта) и сколько осталось до концаработы. Параметры таймера передать
#   при запуске скрипта через параметры.

# 7*Получение рекурсивного списка файлов, имеющих длинные имена (больше заданного числа),
#   сортировка по полному имени файлов (включающему полное путевоеимя, начиная с /) и выдача
#   полученного списка в stdout и, одновременно, в файл.
#   Параметры скрипта: имя директории, в которой производится рекурсивный поиск, и натуральное
#   число минимальная длина имени. Основные средства: структура for, команда find, 'tee'.
