#!/bin/bash
# 1 Написать регулярное выражение, которое проверяет является ли строка валидным IP-адрес.
#   Например, 192.168.1.1 подойдет, а 256.300.1.1 — нет.
isIPreg="/(^|\b)((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])($|\b)/gm"
#-> Всётаки считаю что запись IP4 в виде 111.005.218.217 корректна. Ещё не встречался с системой, на которую влияют лидирующие нули.

# 2 Написать регулярное выражение, которое проверяет, является ли указанный файл картинкой.
#   Картинкой считаем файлы, названия которых оканчиваются на .jpg, .png или .gif.
#-> Список файлов дан в виде: один файл на одной строке.
isPicreg1="/^.+\.(jpg|png|gif)$/gm"     #-> Принимает имя файла и путь 
isPicreg2="/^[^/\s]+\.(jpg|png|gif)$/gm" #-> Принимает только имя файла

# 3 Написать регулярное выражение для проверки, ведет ли ссылка URL на некоторый файл,
#   и это действительно ссылка на картинку. Картинкой считаем файлы, названия которых
#   оканчиваются на .jpg, .png или .gif.
#-> URL проверяем по частям: scheme:[//authority]path[?query][#fragment]
isPicURLreg="/^([A-Za-z][\dA-Za-z+.-]*:\/\/)?((([\w!$&'()*+,;=.~-]|(%[\dA-Fa-f]{2}))+(:[\w!$&'()*+,;=.~-]|(%[\dA-F]{2}))*@)?([\w!$&'()*+,;=.~-]+(:\d+)?)?)?((\/|[\w!?#$&'()*+,;=.~-]|(%[\dA-F]{2}))+(\/))*([\w!$&'()*+,;=.~-]|(%[\dA-F]{2}))*\.(jpg|png|gif)$/gm"
#-> Немного "схалявил": не разбирал случай когда в hostname используется ip4 или ip6
#-> и обработку случаев [?query] и [#fragment] свалил в одну кучу с путями.
#-> Позволю себе не согласиться с некорректностью ссылок в "incorrect links",
#-> т.к. они суть - относительные пути и встречаются в реальной жизни.

# 4*Написать регулярное выражение, которое проверяет, является ли строка валидным «белым»
#   IP-адресом (5.255.255.5 подойдет, а 172.16.0.1 — нет).
#   Будем считать, что белые адреса не принадлежат сетям:
#   0.0.0.0/8 127.0.0.1/8 169.254.0.0/16 172.16.0.0/12 192.168.0.0/16 10.0.0.0/8 255.255.255.255/32
isIPWhitereg="//gm"

# 5*Написать регулярное выражение, которое проверяет, что файл в URL
#   (например, https://site.ru/folder/download/test.docx) не является картинкой.
#   Картинкой считаем файлы, названия которых оканчиваются на .jpg, .png или .gif.
isNotPicreg="/^([A-Za-z][\dA-Za-z+.-]*:\/\/)?((([\w!$&'()*+,;=.~-]|(%[\dA-Fa-f]{2}))+(:[\w!$&'()*+,;=.~-]|(%[\dA-F]{2}))*@)?([\w!$&'()*+,;=.~-]+(:\d+)?)?)?((\/|[\w!?#$&'()*+,;=.~-]|(%[\dA-F]{2}))+(\/))*([\w!$&'()*+,;=.~-]|(%[\dA-F]{2}))*\.[^(jpg)(png)(gif)]+$/gm"
#-> Отличие от задания 3 в описании расширений в конце выражения.

# 6*У вас есть лог log.txt, который содержит запросы на загрузку файлов.
#   Один запрос на одной строке. IP адрес во втором столбце. Имя файла может быть в любом столбце.
#   Столбцы разделены одним или несколькими пробелами. Нужно написать выражение в одну строку,
#   которое выведет список всех IP адресов за исключением loopback интерфейсов, с которых
#   запрашивался файл /closeio.html, а также количество таких запросов для каждого адреса.
#   Результат должен быть отсортирован по этому значению.
#   Можно использовать стандартные тулы, которые запустятся на большинстве UNIX системах.
